#include <iostream>
#include "kuznechik.h"
#include <chrono>

int m128_eq(const __m128i &a, const __m128i &b) {
    return _mm_test_all_ones(_mm_cmpeq_epi8(a, b));
}

void print_m128(__m128i a) {
    uint8_t *b = (uint8_t *) &a;
    for (int i = 0; i < 16; ++i) {
        std::cout << std::hex << (uint16_t) b[i] << " ";
    }
    std::cout << std::endl;
}


void CheckTests() {
    Kuznechik cipher;
    uint8_t Stest[5][16] =
            {
                    {0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00},
                    {0xb6, 0x6c, 0xd8, 0x88, 0x7d, 0x38, 0xe8, 0xd7, 0x77, 0x65, 0xae, 0xea, 0x0c, 0x9a, 0x7e, 0xfc},
                    {0x55, 0x9d, 0x8d, 0xd7, 0xbd, 0x06, 0xcb, 0xfe, 0x7e, 0x7b, 0x26, 0x25, 0x23, 0x28, 0x0d, 0x39},
                    {0x0c, 0x33, 0x22, 0xfe, 0xd5, 0x31, 0xe4, 0x63, 0x0d, 0x80, 0xef, 0x5c, 0x5a, 0x81, 0xc5, 0x0b},
                    {0x23, 0xae, 0x65, 0x63, 0x3f, 0x84, 0x2d, 0x29, 0xc5, 0xdf, 0x52, 0x9c, 0x13, 0xf5, 0xac, 0xda}
            };

    __m128i test[5];
    for (int i = 0; i < 5; ++i) {
        test[i] = *((__m128i *) &Stest[i]);
    }
    std::cout << "S TESTS\n";
    for (int i = 0; i < 4; ++i) {
        cipher.S(test + i);
        if (!m128_eq(test[i], test[i + 1])) {
            std::cout << "S TEST " << i << " FAILED\n";
            exit(1);
        }
    }
    std::cout << "S TESTS PASSED\n";
    std::cout << "L TESTS\n";
    unsigned char kLData[5][16] =
            {
                    {0x64, 0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
                    {0xd4, 0x56, 0x58, 0x4d, 0xd0, 0xe3, 0xe8, 0x4c, 0xc3, 0x16, 0x6e, 0x4b, 0x7f, 0xa2, 0x89, 0x0d},
                    {0x79, 0xd2, 0x62, 0x21, 0xb8, 0x7b, 0x58, 0x4c, 0xd4, 0x2f, 0xbc, 0x4f, 0xfe, 0xa5, 0xde, 0x9a},
                    {0x0e, 0x93, 0x69, 0x1a, 0x0c, 0xfc, 0x60, 0x40, 0x8b, 0x7b, 0x68, 0xf6, 0x6b, 0x51, 0x3c, 0x13},
                    {0xe6, 0xa8, 0x09, 0x4f, 0xee, 0x0a, 0xa2, 0x04, 0xfd, 0x97, 0xbc, 0xb0, 0xb4, 0x4b, 0x85, 0x80}
            };
    for (int i = 0; i < 5; ++i) {
        test[i] = *((__m128i *) &kLData[i]);
    }
    for (int i = 0; i < 4; ++i) {
        cipher.L(test + i);
        if (!m128_eq(test[i], test[i + 1])) {
            std::cout << "L TEST " << i << " FAILED\n";
            exit(1);
        }
    }
    std::cout << "L TESTS PASSED\n";

    uint8_t Keys[10][16] = {
            {0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77},
            {0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef},
            {0xdb, 0x31, 0x48, 0x53, 0x15, 0x69, 0x43, 0x43, 0x22, 0x8d, 0x6a, 0xef, 0x8c, 0xc7, 0x8c, 0x44},
            {0x3d, 0x45, 0x53, 0xd8, 0xe9, 0xcf, 0xec, 0x68, 0x15, 0xeb, 0xad, 0xc4, 0x0a, 0x9f, 0xfd, 0x04},
            {0x57, 0x64, 0x64, 0x68, 0xc4, 0x4a, 0x5e, 0x28, 0xd3, 0xe5, 0x92, 0x46, 0xf4, 0x29, 0xf1, 0xac},
            {0xbd, 0x07, 0x94, 0x35, 0x16, 0x5c, 0x64, 0x32, 0xb5, 0x32, 0xe8, 0x28, 0x34, 0xda, 0x58, 0x1b},
            {0x51, 0xe6, 0x40, 0x75, 0x7e, 0x87, 0x45, 0xde, 0x70, 0x57, 0x27, 0x26, 0x5a, 0x00, 0x98, 0xb1},
            {0x5a, 0x79, 0x25, 0x01, 0x7b, 0x9f, 0xdd, 0x3e, 0xd7, 0x2a, 0x91, 0xa2, 0x22, 0x86, 0xf9, 0x84},
            {0xbb, 0x44, 0xe2, 0x53, 0x78, 0xc7, 0x31, 0x23, 0xa5, 0xf3, 0x2f, 0x73, 0xcd, 0xb6, 0xe5, 0x17},
            {0x72, 0xe9, 0xdd, 0x74, 0x16, 0xbc, 0xf4, 0x5b, 0x75, 0x5d, 0xba, 0xa8, 0x8e, 0x4a, 0x40, 0x43},
    };

    uint8_t key[32] = {
            0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55,
            0x66, 0x77, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67,
            0x89, 0xab, 0xcd, 0xef
    };
    std::cout << "KEY TEST" << std::endl;
    __m256i key_ = _mm256_load_si256((__m256i *) key);
    cipher.SetKey(key_);
    for (size_t i = 0; i < 10; ++i) {
        __m128i current_key = cipher.GetKey(i);
        __m128i answer = *((__m128i *) Keys[i]);
        if (!m128_eq(current_key, answer)) {
            std::cout << "KEY  " << i << " IS WRONG\n";
            exit(1);
        }
    }
    std::cout << "KEY TEST PASSED" << std::endl;
    std::cout << "ENCODING TEST" << std::endl;
    uint8_t block[16] = {
            0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa,
            0x99, 0x88

    };
    __m128i block_ = *((__m128i *) block);

    uint8_t answer[16] = {
            0x7f, 0x67, 0x9d, 0x90, 0xbe, 0xbc, 0x24, 0x30, 0x5a, 0x46, 0x8d, 0x42, 0xb9, 0xd4,
            0xed, 0xcd
    };
    __m256i block256 = _mm256_set_m128i(block_, block_);
    cipher.EncryptBlock(&block_);
    cipher.Encrypt2Blocks(&block256);

    __m128i answer_ = *((__m128i *) answer);
    if (!m128_eq(answer_, block_)) {
        std::cout << "ENCODING TEST FAILED\n";
        exit(1);
    }
    if (!(m128_eq(answer_, _mm256_extractf128_si256(block256, 0)) &&
          m128_eq(answer_, _mm256_extractf128_si256(block256, 1)))) {
        std::cout << "ENCODING 2 BLOCKS TEST FAILED\n";
        exit(1);
    }
    std::cout << "ENCODING TEST PASSED" << std::endl;
}


void SpeedTest(int size, int maxk) {
    Kuznechik cipher;
    cipher.GenerateKey();
    uint8_t *data_test = new uint8_t[size];
    for (int i = 0; i < size; ++i) {
        data_test[i] = rand();
    }
    std::cout << "ENCODING SIZE: " << 1.0 * size / 0x100000 << " MB " << maxk << "TIMES\n";
    cipher.GenerateKey();
    auto now = std::chrono::high_resolution_clock::now();
    __m128i *pointer = (__m128i *) data_test;
    for (int k = 0; k < maxk; ++k) {
        for (int i = 0, j = 0; i < size; i += 16, ++j) {
            cipher.EncryptBlock(pointer + j);
        }
    }
    std::cout << "ONE BLOCK SPEED " << 1000.0 * size * maxk / 0x100000 /
                                       std::chrono::duration_cast<std::chrono::milliseconds>(
                                               std::chrono::high_resolution_clock::now() -
                                               now).count() << " MB/s\n";
    now = std::chrono::high_resolution_clock::now();
    __m256i *pointer256 = (__m256i *) data_test;

    for (int k = 0; k < maxk; ++k) {
        for (int i = 0, j = 0; i < size; i += 32, ++j) {
            cipher.Encrypt2Blocks(pointer256 + j);
        }
    }
    std::cout << "TWO BLOCK SPEED " << 1000.0 * size * maxk / 0x100000 /
                                       std::chrono::duration_cast<std::chrono::milliseconds>(
                                               std::chrono::high_resolution_clock::now() -
                                               now).count() << " MB/s\n";
    print_m128(*(__m128i *) data_test);
    std::cout << "SPEED TEST DONE\n";
};

int main() {
    CheckTests();
    int size = 0x40000000;
    int maxk = 1;
    SpeedTest(size, maxk);


    return 0;
}